if turtle then
    print("Mobile servers not allowed!")
    no = true
end
 
function displayHelp()
    term.clear()
    file = io.open("/bin/lnexi-lib/CORE/packages/support/RestriHelp", "r")
    f = file:read("*a")
    file:close()
    term.setCursorPos(1,1)
    print(f)
    os.pullEvent("key")
    menu()
end
 
function os.pullEvent()
    local cEvent, p1, p2, p3, p4, p5 = os.pullEventRaw()
        if cEvent == "terminate" then
        end
    return cEvent, p1, p2, p3, p4, p5
end
 
function getCenterX(sText)
local nWidth = term.getSize()
local x = math.floor(nWidth / 2) - math.floor(string.len(sText) / 2)
return x
end
 
function getCenterY()
    local nWidth, nHeight = term.getSize()
    local y = math.floor(nHeight / 2)
    return y
end
 
function getRight(sText)
    local nWidth = term.getSize()
    local x = nWidth - string.len(sText)
    return x + 1
end
 
function runMenu(mChoices, sMenuTitle)
    local nSelection = 0
    local bLoop = true
     
    while bLoop == true do
        term.clear()
        term.setCursorPos(1, 1)
        print(sMenuTitle)
        print()
     
        for nLine = 0, #mChoices do
            local sLine = "  "
            if nSelection == nLine then
                sLine = "> "
            end
            sLine = sLine .. mChoices[nLine]
            print(sLine)
        end
         
        local nWidth, nHeight = term.getSize()
        local y = nHeight
        local x = getRight("LNET Technologies")
        term.setCursorPos(x, y)
        term.write("LNET Technologies")
         
        local sEvent, nKey = os.pullEvent("key")
         
        if nKey == 200 then
            if mChoices[nSelection - 2] then
                nSelection = nSelection - 2
            end
        elseif nKey == 208 then
            if mChoices[nSelection + 2] then
                nSelection = nSelection + 2
            end
        elseif nKey == 28 then
            if mChoices[nSelection] then
                bLoop = false
                return nSelection
            end
        end
    end
end
 
function menu()
    repeat
        if nMenuNum == 0 then
            mChoices = {}
            mActions = {}
            mChoices[0] = "LNET Security Program"  
            mChoices[1] = " "
            mChoices[2] = "Cancel Setup"
            mActions[0] = function() nMenuNum = 1 end
            mActions[2] = function()
                term.clear()
                local x = getCenterX("Cancelling Installation")
                local y = getCenterY()
                term.setCursorPos(x, y)
                term.write("Cancelling Installation")
                local x = getCenterX("Please wait...")
                term.setCursorPos(x, y + 1)
                term.write("Please wait...")
                local nWidth, nHeight = term.getSize()
                local y = nHeight
                local x = getRight("LNET Technologies")
                term.setCursorPos(x, y)
                term.write("LNET Technologies")
                sleep(3)
                os.shutdown()
            end
            local nSelection = runMenu(mChoices, "Select software package:")
            mActions[nSelection]()
        elseif nMenuNum == 1 then
            mChoices = {}
            mActions = {}
            mChoices[0] = "LNEX Security System: Client Stand Alone"
            mChoices[1] = " "
            mChoices[2] = "LNEX Security System: Client DataBase"
            mChoices[3] = " "
            mChoices[4] = "LNEX Security System: DataBase"
            mChoices[5] = " "
            mChoices[6] = "Cancel Setup"
            mActions[0] = function() nMenuNum = 2 sVersion = "ClientSA" end
            mActions[2] = function() nMenuNum = "2a" sVersion = "ClientDB" end
            mActions[4] = function() nMenuNum = "2b" sVersion = "DataB" end
            mActions[6] = function()
                term.clear()
                local x = getCenterX("Cancelling Installation")
                local y = getCenterY()
                term.setCursorPos(x, y)
                term.write("Cancelling Installation")
                local x = getCenterX("Please wait...")
                term.setCursorPos(x, y + 1)
                term.write("Please wait...")
                local nWidth, nHeight = term.getSize()
                local y = nHeight
                local x = getRight("LNET Technologies")
                term.setCursorPos(x, y)
                term.write("LNET Technologies")
                sleep(3)
                os.shutdown()
            end
            local nSelection = runMenu(mChoices, "Select a LNEX version:")
            mActions[nSelection]()
        elseif nMenuNum == 2 then
            mChoices = {}
            mActions = {}
            mChoices[0] = "Install"
            mChoices[1] = " "
            mChoices[2] = "Skip"
            mChoices[3] = " "
            mChoices[4] = "Return"
            mActions[0] = function() nMenuNum = 4 bLogPref = true end
            mActions[2] = function() nMenuNum = 4 bLogPref = false end
            mActions[4] = function() nMenuNum = 1 end
            tempNum = nMenuNum
            local nSelection = runMenu(mChoices, "Security Preface:")
            mActions[nSelection]()
        elseif nMenuNum == "2a" then
            mChoices = {}
            mActions = {}
            mChoices[0] = "Install"
            mChoices[1] = " "
            mChoices[2] = "Skip"
            mChoices[3] = " "
            mChoices[4] = "Return"
            mActions[0] = function() nMenuNum = 3 bLogPref = true end
            mActions[2] = function() nMenuNum = 3 bLogPref = false end
            mActions[4] = function() nMenuNum = 1 end
            tempNum = nMenuNum
            local nSelection = runMenu(mChoices, "Security Preface:")
            mActions[nSelection]()
        elseif nMenuNum == "2b" and no ~= true then
            mChoices = {}
            mActions = {}
            mChoices[0] = "n/a"
            mChoices[1] = " "
            mChoices[2] = "Cancel Setup"
            mChoices[3] = " "
            mChoices[4] = "Return"
            mActions[0] = function() bMenuLoop = false end
            mActions[2] = function()
                term.clear()
                local x = getCenterX("Cancelling Installation")
                local y = getCenterY()
                term.setCursorPos(x, y)
                term.write("Cancelling Installation")
                local x = getCenterX("Please wait...")
                term.setCursorPos(x, y + 1)
                term.write("Please wait...")
                local nWidth, nHeight = term.getSize()
                local y = nHeight
                local x = getRight("LNET Technologies")
                term.setCursorPos(x, y)
                term.write("LNET Technologies")
                sleep(3)
                os.shutdown()
            end
            mActions[4] = function() nMenuNum = 1 end
            local nSelection = runMenu(mChoices, "Security Preface:")
            mActions[nSelection]()
        elseif nMenuNum == 3 then --Server Setup
            term.clear()
            local nWidth, nHeight = term.getSize()
            local y = nHeight
            local x = getRight("LNET Technologies")
            term.setCursorPos(x, y)
            term.write("LNET Technologies")
            term.setCursorPos(1,1)
            write("Server ID: ")
            si = read()
            write("Confirm ID: ")
            sc = read()
            if si == sc then
                file = io.open("/bin/lnexi-lib/CORE/packages/Client-DB/setup/id" , "w")
                file:write(si)
                file:close()
                nMenuNum = 4
            else
                print("IDs not the same!")
                nMenuNum = 3
            end
        elseif nMenuNum == 4 then
            mChoices = {}
            mActions = {}
            mChoices[0] = "Install"
            mChoices[1] = " "
            mChoices[2] = "Skip"
            mChoices[3] = " "
            mChoices[4] = "Return"
            mChoices[5] = " "
            mChoices[6] = "What's This?"
            mActions[0] = function() bMenuLoop = false bLRes = true end
            mActions[2] = function() bMenuLoop = false bLRes = false end
            mActions[4] = function() nMenuNum = tempNum end
            mActions[6] = function() displayHelp() end
            local nSelection = runMenu(mChoices, "RestriShell *WARNING-STILL IN BETA*:")
            mActions[nSelection]()
        else
            term.clear()
            term.setCursorPos(1,1)
            term.write("Server cannot be installed on a turtle! Use an advanced computer only.")
            os.pullEvent("key")
            os.shutdown()
        end
    until bMenuLoop == false
end
 
--LNEX Software--
term.clear()
local x = getCenterX("Initializing Installation")
local y = getCenterY()
term.setCursorPos(x , y)
print("Initializing Installation")
local x = getCenterX("Please wait...")
term.setCursorPos(x , y + 1)
print("Please wait...")
 
local nWidth, nHeight = term.getSize()
local y = nHeight
local x = getRight("LNET Technologies")
term.setCursorPos(x, y)
term.write("LNET Technologies")
 
sleep(3)
 
bMenuLoop = true
nMenuNum = 0
mChoices = {}
mActions = {}
menu()
term.clear()
local nWidth, nHeight = term.getSize()
local y = nHeight
local x = getRight("LNET Technologies")
term.setCursorPos(x, y)
term.write("LNET Technologies")
term.setCursorPos(1,1)
 
if sVersion == "ClientSA" then
    sVersionNum = "v7.4.9 sp F8"
    sCopyPath = "/bin/lnexi-lib/CORE/packages/Client-SA"
    print("Installing LNEX Stand Alone Client " .. sVersionNum .. "...")
 
 
print()
 
--Creating Directories--
 
mDirs = {}
mDirs[1] = "/LNEX"
mDirs[2] = "/LNEX/def"
mDirs[3] = "/LNEX/Client-SA"
mDirs[4] = "/LNEX/Client-SA/Client"
mDirs[5] = "/LNEX/Client-SA/secpref"
mDirs[6] = "/LNEX/Client-SA/data"
mDirs[7] = "/LNEX/Client-SA/data/retrieve"
mDirs[8] = "/LNEX/Client-SA/APIS"
mDirs[9] = "/LNEX/Client-SA/security"
 
print("Creating Directories")
print()
 
for n = 1, #mDirs do
    if not fs.isDir(mDirs[n]) then fs.makeDir(mDirs[n]) end
    term.setCursorPos(1, 5)
    term.clearLine()
    term.write(mDirs[n])
    fs.makeDir(mDirs[n])
    sleep(0.1)
end
 
term.setCursorPos(1, 3)
term.clearLine()
print("Copying files...")
print()
 
term.setCursorPos(1, 5)
term.clearLine()
term.write("/startup")
if fs.exists ("/startup") then fs.delete("/startup") end
fs.copy ("/bin/lnexi-lib/CORE/packages/Client-SA/start/startup" , "/startup") --Finish
sleep(0.1)
 
term.clearLine()
term.write("/profile")
if fs.exists ("/prof") then fs.delete("/prof") end
fs.copy ("/bin/lnexi-lib/CORE/progs/prof" , "/prof")
sleep(0.1)
 
mAPIs = {}
mAPIs[1] = "WFCI"
mAPIs[2] = "WPCI"
mAPIs[3] = "WAPI"
mAPIs[4] = "WNIL"
mAPIs[5] = "ip"
mAPIs[6] = "fidx"
 
for n = 1, #mAPIs do
    term.setCursorPos(1, 5)
    term.clearLine()
    term.write("/LNEX/Client-SA/APIS/" .. mAPIs[n])
    if fs.exists("/LNEX/Client-SA/APIS/" .. mAPIs[n]) then fs.delete("/LNEX/Client-SA/APIS/" .. mAPIs[n]) end
    fs.copy("/bin/lnexi-lib/CORE/packages/Client-SA/APIS/" .. mAPIs[n], "/LNEX/Client-SA/APIS/" .. mAPIs[n])
    sleep(0.1)
end
 
os.loadAPI("/LNEX/Client-SA/APIS/WFCI")
 
mFiles = {}
mFiles[1] = "/Client/LNEX"
 
for n = 1, #mFiles do
    if n >= 1 then _sPath = sCopyPath .. mFiles[n] else _sPath = "/bin/lnexi-lib/CORE/packages/Client-SA" .. mFiles[n] end
    sPath = "/LNEX/Client-SA" .. mFiles[n]
    term.setCursorPos(1, 5)
    term.clearLine()
    term.write(sPath)
    if WFCI.exists(sPath) then fs.delete(sPath) end
    fs.copy(_sPath, sPath)
    sleep(0.1)
end
--Optional Software--
 
if bLogPref == true then
    term.setCursorPos(1, 5)
    term.clearLine()
    term.write("/LNEX/Client-SA/secpref/secprefa")
    if fs.exists("/LNEX/Client-SA/secpref/secprefa") then fs.delete("/LNEX/Client-SA/secpref/secprefa") end
    fs.copy(sCopyPath .. "/secpref/secprefa", "/LNEX/Client-SA/secpref/secprefa")
    sleep(0.1)
else
    if WFCI.exists("/LNEX/Client-SA/secpref/secprefa") then fs.delete("/LNEX/Client-SA/secpref/secprefa") end  
end
 
if bLRes == true then
    term.setCursorPos(1,5)
    term.clearLine()
    term.write("/LNEX/Client-SA/security/run")
    if fs.exists("/LNEX/Client-SA/security/run") then fs.delete("/LNEX/Client-SA/security/run") end
    fs.copy(sCopyPath .. "/security/run", "/LNEX/Client-SA/security/run")
    sleep(0.1)
else
    if WFCI.exists("/LNEX/Client-SA/security/run") then fs.delete("/LNEX/Client-SA/security/run") end
end
 
term.setCursorPos(1, 5)
    term.clearLine()
    term.write("/LNEX/Client-SA/uninstall/")
    sleep(1)
    if fs.exists("/uninstall" ) then fs.delete("/uninstall") end
    fs.copy("/bin/lnexi-lib/CORE/packages/Client-SA/start/uninstall", "/uninstall")
    sleep(0.1)
elseif sVersion == "ClientDB" then
    sVersionNum = "v7.0.4 sp F8"
    sCopyPath = "/bin/lnexi-lib/CORE/packages/Client-DB"
    print("Installing LNEX Database Client " .. sVersionNum .. "...")
    print()
     
    --Creating Directories--
 
mDirs = {}
mDirs[1] = "/LNEX"
mDirs[2] = "/LNEX/def"
mDirs[3] = "/LNEX/Client-DB"
mDirs[4] = "/LNEX/Client-DB/Client"
mDirs[5] = "/LNEX/Client-DB/secpref"
mDirs[6] = "/LNEX/Client-DB/data"
mDirs[7] = "/LNEX/Client-DB/data/retrieve"
mDirs[8] = "/LNEX/Client-DB/APIS"
mDirs[9] = "/LNEX/Client-DB/connect-info"
mDirs[10] = "/LNEX/Client-DB/security"
 
print("Creating Directories")
print()
 
for n = 1, #mDirs do
    if not fs.isDir(mDirs[n]) then fs.makeDir(mDirs[n]) end
    term.setCursorPos(1, 5)
    term.clearLine()
    term.write(mDirs[n])
    fs.makeDir(mDirs[n])
    sleep(0.1)
end
 
term.setCursorPos(1, 3)
term.clearLine()
print("Copying files...")
print()
 
term.setCursorPos(1, 5)
term.clearLine()
term.write("/startup")
if fs.exists ("/startup") then fs.delete("/startup") end
fs.copy ("/bin/lnexi-lib/CORE/packages/Client-DB/start/startup" , "/startup") --Finish
sleep(0.1)
 
term.clearLine()
term.write("/profile")
if fs.exists ("/prof") then fs.delete("/prof") end
fs.copy ("/bin/lnexi-lib/CORE/progs/prof" , "/prof")
sleep(0.1)
 
 
mAPIs = {}
mAPIs[1] = "WFCI"
mAPIs[2] = "WPCI"
mAPIs[3] = "WAPI"
mAPIs[4] = "WNIL"
mAPIs[5] = "ip"
mAPIs[6] = "fidx"
 
for n = 1, #mAPIs do
    term.setCursorPos(1, 5)
    term.clearLine()
    term.write("/LNEX/Client-DB/APIS/" .. mAPIs[n])
    if fs.exists("/LNEX/Client-DB/APIS/" .. mAPIs[n]) then fs.delete("/LNEX/Client-DB/APIS/" .. mAPIs[n]) end
    fs.copy("/bin/lnexi-lib/CORE/packages/Client-DB/APIS/" .. mAPIs[n], "/LNEX/Client-DB/APIS/" .. mAPIs[n])
    sleep(0.1)
end
 
os.loadAPI("/LNEX/Client-DB/APIS/WFCI")
 
mFiles = {}
mFiles[1] = "/Client/LNEX"
mFiles[2] = "/setup/id"
 
for n = 1, #mFiles do
    if mFiles[n] == "/setup/id" then
        if n >= 1 then _sPath = sCopyPath .. mFiles[n] else _sPath = "/bin/lnexi-lib/CORE/packages/Client-DB" .. mFiles[n] end
        sPath = "/LNEX/Client-DB/connect-info/id"
        term.setCursorPos(1, 5)
        term.clearLine()
        term.write(sPath)
        if WFCI.exists(sPath) then fs.delete(sPath) end
        fs.copy(_sPath, sPath)
        sleep(0.1)
    else
        if n >= 1 then _sPath = sCopyPath .. mFiles[n] else _sPath = "/bin/lnexi-lib/CORE/packages/Client-DB" .. mFiles[n] end
        sPath = "/LNEX/Client-DB" .. mFiles[n]
        term.setCursorPos(1, 5)
        term.clearLine()
        term.write(sPath)
        if WFCI.exists(sPath) then fs.delete(sPath) end
        fs.copy(_sPath, sPath)
        sleep(0.1)
    end
end
--Optional Software--
 
if bLogPref == true then
    term.setCursorPos(1, 5)
    term.clearLine()
    term.write("/LNEX/Client-DB/secpref/secprefa")
    if fs.exists("/LNEX/Client-DB/secpref/secprefa") then fs.delete("/LNEX/Client-DB/secpref/secprefa") end
    fs.copy(sCopyPath .. "/secpref/secprefa", "/LNEX/Client-DB/secpref/secprefa")
    sleep(0.1)
else
    if WFCI.exists("/LNEX/Client-DB/secpref/secprefa") then fs.delete("/LNEX/Client-DB/secpref/secprefa") end  
end
 
if bLRes == true then
    term.setCursorPos(1,5)
    term.clearLine()
    term.write("/LNEX/Client-DB/security/run")
    if fs.exists("/LNEX/Client-DB/security/run") then fs.delete("/LNEX/Client-DB/security/run") end
    fs.copy(sCopyPath .. "/security/run", "/LNEX/Client-DB/security/run")
    sleep(0.1)
else
    if WFCI.exists("/LNEX/Client-DB/security/run") then fs.delete("/LNEX/Client-DB/security/run") end
end
 
term.setCursorPos(1, 5)
    term.clearLine()
    term.write("/LNEX/Client-DB/uninstall/")
    sleep(1)
    if fs.exists("/uninstall" ) then fs.delete("/uninstall") end
    fs.copy("/bin/lnexi-lib/CORE/packages/Client-DB/start/uninstall", "/uninstall")
    sleep(0.1)
     
elseif sVersion == "DataB" then
    sVersionNum = "v4.9.2 sp C2"
    sCopyPath = "/bin/lnexi-lib/CORE/packages/Server"
    print("Installing LNEX Server " .. sVersionNum .. "...")
    print()
     
mDirs = {}
mDirs[1] = "/LNEX"
mDirs[2] = "/LNEX/def"
mDirs[3] = "/LNEX/Server"
mDirs[4] = "/LNEX/Server/CompServe"
mDirs[5] = "/LNEX/Server/progs"
mDirs[6] = "/LNEX/Server/APIS"
 
print("Creating Directories")
print()
 
for n = 1, #mDirs do
    if not fs.isDir(mDirs[n]) then fs.makeDir(mDirs[n]) end
    term.setCursorPos(1, 5)
    term.clearLine()
    term.write(mDirs[n])
    fs.makeDir(mDirs[n])
    sleep(0.1)
end
 
term.setCursorPos(1, 3)
term.clearLine()
print("Copying files...")
print()
 
mAPIs = {}
mAPIs[1] = "WFCI"
mAPIs[2] = "WPCI"
mAPIs[3] = "WAPI"
mAPIs[4] = "WNIL"
mAPIs[5] = "ip"
 
for n = 1, #mAPIs do
    term.setCursorPos(1, 5)
    term.clearLine()
    term.write("/LNEX/Server/APIS/" .. mAPIs[n])
    if fs.exists("/LNEX/Server/APIS/" .. mAPIs[n]) then fs.delete("/LNEX/Server/APIS/" .. mAPIs[n]) end
    fs.copy("/bin/lnexi-lib/CORE/packages/Client-DB/APIS/" .. mAPIs[n], "/LNEX/Server/APIS/" .. mAPIs[n])
    sleep(0.1)
end
 
os.loadAPI("/LNEX/Server/APIS/WFCI")
 
term.setCursorPos(1, 5)
term.clearLine()
term.write("/startup")
if fs.exists ("/startup") then fs.delete("/startup") end
fs.copy ("/bin/lnexi-lib/CORE/packages/Server/start/startup" , "/startup")
sleep(0.1)
 
mFiles = {}
mFiles[1] = "/files/host"
 
for n = 1, #mFiles do
    if mFiles[n] == "/files/host" then
        if n >= 1 then _sPath = sCopyPath .. mFiles[n] else _sPath = "/bin/lnexi-lib/CORE/packages/Server" .. mFiles[n] end
        sPath = "/LNEX/Server/progs/host"
        term.setCursorPos(1, 5)
        term.clearLine()
        term.write(sPath)
        if WFCI.exists(sPath) then fs.delete(sPath) end
        fs.copy(_sPath, sPath)
        sleep(0.1)
    end
end
 
end
--Finalizing--
 
term.clear()
local nWidth, nHeight = term.getSize()
local y = nHeight
local x = getRight("LNET Technologies")
term.setCursorPos(x, y)
term.write("LNET Technologies")
term.setCursorPos(1, 1)
print(sVersion .. " " .. sVersionNum .. " installation complete.")
sleep(0.1)
print()
print("Press any key to continue...")
os.pullEvent("key")
 
term.clear()
local nWidth, nHeight = term.getSize()
local y = nHeight
local x = getRight("LNET Technologies")
term.setCursorPos(x, y)
term.write("LNET Technologies")
term.setCursorPos(1, 1)
 
 
local x = getCenterX("Finishing Installation")
local y = getCenterY()
term.setCursorPos(x, y)
term.write("Finishing Installation")
local x = getCenterX("Please wait...")
term.setCursorPos(x, y + 1)
term.write("Please wait...")
sleep(3)
term.setCursorPos(1, 1)
term.clear()
fs.delete("/bin/lnexi-lib")
os.reboot()
